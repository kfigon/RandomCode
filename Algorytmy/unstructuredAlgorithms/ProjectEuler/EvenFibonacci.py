__author__ = 'kamil'

import unittest
# Even Fibonacci numbers
# Problem 2
#
# Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do
# not exceed four million, find the sum of the even-valued terms.
#

# generuje ciag do indeksu x
def generujFibo(x):
    if(x<=0):
        return []

    out=[0]*x
    for i in range(len(out)):
        if(i == 0):
            out[i]=1
        elif(i==1):
            out[i]=2
        else:
            out[i] = out[i-1] + out[i-2]
    return out

def bruteForce(x):
    ciag = generujFibo(x)
    suma=0
    for el in ciag:
        if(el % 2 == 0):
            suma+=el
    return suma

def getFiboEl(n):
    if(n <=0):
        return 1
    elif(n<=1):
        return 2

    przedostatni=1
    ostatni=2
    aktualny=przedostatni+ostatni

    i = 2
    while(i <= n):
        aktualny = ostatni+przedostatni
        przedostatni=ostatni
        ostatni=aktualny
        i+=1

    return aktualny

def foo(x):
    przedostatni=1
    ostatni=2
    suma=ostatni

    i = 2
    while(i < x):
        aktualny = ostatni+przedostatni
        przedostatni=ostatni
        ostatni=aktualny

        # parzyste sa na idx 1, 4, 7, 10, 13, 16...
        if(i % 3 == 1):
            suma += aktualny
        i+=1
    return suma

class TestFibo(unittest.TestCase):
    def testFiboN(self):
        self.assertEqual(89, getFiboEl(9))
        self.assertEqual(17711, getFiboEl(20))

    def testFibo(self):
        self.assertEqual([1,2,3,5,8,13,21,34,55,89], generujFibo(10))

    def test1(self):
        expected, argument = 10, 5
        self.assertEqual(expected, bruteForce(argument))
        self.assertEqual(expected, foo(argument))

    def test2(self):
        expected, argument = 44, 10
        self.assertEqual(expected, bruteForce(argument))
        self.assertEqual(expected, foo(argument))

    def test3(self):
        expected, argument = 3382, 17
        self.assertEqual(expected, bruteForce(argument)) #wysypuje sie, za duzo :D
        self.assertEqual(expected, foo(argument))

    def test4(self):
        expected, argument = 257114, 26
        self.assertEqual(expected, bruteForce(argument))
        self.assertEqual(expected, foo(argument))

    def test5(self):
        expected, argument = 257114, 27
        self.assertEqual(expected, bruteForce(argument))
        self.assertEqual(expected, foo(argument))

    def testUltimate(self):
        expected, argument = 4613732, 4000000
        #self.assertEqual(expected, bruteForce(argument)) wysypuje sie, za duzo :D
        # self.assertEqual(expected, foo(argument))

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,
# 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,
# 121393, 196418, 317811
if __name__ == '__main__':
    unittest.main()
